Teams <- data.table(Teams)
# explore Teams data
str(Teams)
head(Teams)
# filter Teams to only include 1960 - 2019
Teams <- Teams[yearID>1968,]
summary(Teams)
head(Teams)
### Playoffs Variable ########################################################
# Teams that made the playoffs
#2012 - Present (not inlcuding 2020) 10 teams made the playoffs
Teams[yearID==2019,]
Teams[yearID==2019 & (DivWin=="Y" | WCWin == "Y"),]
Teams[yearID==2012 & (DivWin=="Y" | WCWin == "Y"),1:40]
# 1994 -2011 8 teams made the playoffs 1994 there was NO POST SEASON
Teams[yearID==2011,1:40]
Teams[yearID==2011 & (DivWin=="Y" | WCWin=="Y"),1:40]
Teams[yearID==1995,1:40]
Teams[yearID==1995 & (DivWin=="Y" | WCWin=="Y"),1:40]
Teams[yearID==1994,]
Teams[yearID==1994 & (DivWin=="Y" | WCWin=="Y"),1:40]
# 1969 -1993 4 teams made the playoffs
Teams[yearID==1993,]
Teams[yearID==1993 & DivWin=="Y",]
Teams[yearID==1969,1:40]
Teams[yearID==1969 & DivWin=="Y",1:40]
# Creating playoffs variable
Teams$Playoffs <- "N"
Teams[yearID>1993 & (DivWin=="Y" | WCWin=="Y"), Playoffs:= "Y"]
Teams[yearID<1994 & DivWin=="Y", Playoffs:="Y"]
# creating playoffs Lag variable
setkey(Teams, teamID, yearID) # important for ordering
Teams[,playoff_nextyear:=(shift(Playoffs, -1)),by=teamID]
Teams[teamID=='ATL',c(1:20,46:50)]
### Team Salaries ############################################################
data("Salaries")
Salaries <- data.table(Salaries)
str(Salaries)
head(Salaries)
Salaries$salary <- as.numeric(Salaries$salary)
Salaries[,TeamSalary:=sum(salary), by = c("yearID","teamID")]
Salaries <- unique(Salaries[,c("yearID","teamID","TeamSalary")])
Salaries[,TeamSalary:=TeamSalary/mean(TeamSalary), by = c("yearID")]
Salaries
# add 2017 - 2019 salaries
Sal_17_19 <- read.csv('../data/input/salaries2017-19.csv')
setnames(Sal_17_19, "salary","TeamSalary")
Salaries <- rbind(Salaries,Sal_17_19)
# merge Salaries with Teams data
Teams_w_salary <- merge(Teams, Salaries,  by = c("yearID","teamID"), all.x = TRUE)
Teams_w_salary
Teams_w_salary
Teams_w_salary[yearID==2019 & Playoffs=='Y',1:5]
Teams_w_salary[yearID==2018 & playoff_nextyear=='Y',1:5]
# filter to only years with team salary data
Teams_w_salary <- Teams_w_salary[yearID>1984 & yearID!=1993,]
Teams_w_salary[yearID==2019 & Playoffs=='Y',1:5]
Teams_w_salary[yearID==2018 & playoff_nextyear=='Y',1:5]
### Data without salary ###
final_teams <- Teams[,c(1,6,15,17:24,28,33:36,50)]
### Data with salary ###
final_teams_salary <- Teams_w_salary[,c(1,6,15,17:24,28,33:36,50,51)]
final_teams_salary[yearID==2019 & Playoffs=='Y',1:5]
final_teams_salary[yearID==2018 & playoff_nextyear=='Y',1:5]
# write out to csv
dir.create('data', showWarning=FALSE)
write.csv(final_teams, file.path('data', 'final_teams.csv'))
write.csv(final_teams_salary, file.path('data', 'final_teams_salary.csv'))
final_teams_salary = read.csv('./data/final_teams_salary.csv')[,-1]
final_teams_salary[yearID==2018 & playoff_nextyear=='Y',1:5]
final_teams_salary <- data.table(final_teams_salary)
final_teams_salary[yearID==2018 & playoff_nextyear=='Y',1:5]
final_teams_salary = read.csv('./data/final_teams_salary.csv')[,-1]
factor_cols = c('playoff_nextyear')
final_teams_salary[factor_cols] <- lapply(final_teams_salary[factor_cols] , factor)
final_teams_salary[yearID==2018 & playoff_nextyear=='Y',]
final_teams_salary <- data.table(final_teams_salary)
final_teams_salary[yearID==2018 & playoff_nextyear=='Y',]
final_teams_salary = read.csv('./data/final_teams_salary.csv')[,-1]
factor_cols = c('playoff_nextyear')
final_teams_salary[factor_cols] <- lapply(final_teams_salary[factor_cols] , factor)
final_teams_salary <- na.omit(final_teams_salary, cols="playoff_nextyear")
final_teams_salary <- data.table(final_teams_salary)
final_teams_salary[yearID==2018 & playoff_nextyear=='Y',]
Teams_w_salary[yearID==2018 & ,]
Teams_w_salary[yearID==2018 ,]
Sal_17_19 <- read.csv('../data/input/salaries2017-19.csv')
setnames(Sal_17_19, "salary","TeamSalary")
Sal_17_19
Sal_17_19$teamID
table(Sal_17_19$teamID)
Teams_w_salary[yearID==2018 ,]
Teams_w_salary[yearID==2013 ,]
table(Teams$teamID)
table(Teams[yearID==2013,]$teamID)
Teams[yearID==2013,c('teamID')]
Sal_17_19[yearID==2018,c('teamID')]
Sal_17_19
Sal_17_19 <- data.table(Sal_17_19)
Sal_17_19[yearID==2018,c('teamID')]
Teams[yearID==2013,c('teamID')]
Teams[yearID==2013,]
# load libraries
library(Lahman)
library(data.table)
library(dplyr)
# load in Teams data
data("Teams")
Teams <- data.table(Teams)
# explore Teams data
str(Teams)
head(Teams)
# filter Teams to only include 1960 - 2019
Teams <- Teams[yearID>1968,]
summary(Teams)
head(Teams)
### Playoffs Variable ########################################################
# Teams that made the playoffs
#2012 - Present (not inlcuding 2020) 10 teams made the playoffs
Teams[yearID==2019,]
Teams[yearID==2019 & (DivWin=="Y" | WCWin == "Y"),]
Teams[yearID==2012 & (DivWin=="Y" | WCWin == "Y"),1:40]
# 1994 -2011 8 teams made the playoffs 1994 there was NO POST SEASON
Teams[yearID==2011,1:40]
Teams[yearID==2011 & (DivWin=="Y" | WCWin=="Y"),1:40]
Teams[yearID==1995,1:40]
Teams[yearID==1995 & (DivWin=="Y" | WCWin=="Y"),1:40]
Teams[yearID==1994,]
Teams[yearID==1994 & (DivWin=="Y" | WCWin=="Y"),1:40]
# 1969 -1993 4 teams made the playoffs
Teams[yearID==1993,]
Teams[yearID==1993 & DivWin=="Y",]
Teams[yearID==1969,1:40]
Teams[yearID==1969 & DivWin=="Y",1:40]
# Creating playoffs variable
Teams$Playoffs <- "N"
Teams[yearID>1993 & (DivWin=="Y" | WCWin=="Y"), Playoffs:= "Y"]
Teams[yearID<1994 & DivWin=="Y", Playoffs:="Y"]
# creating playoffs Lag variable
setkey(Teams, teamID, yearID) # important for ordering
Teams[,playoff_nextyear:=(shift(Playoffs, -1)),by=teamID]
Teams[teamID=='ATL',c(1:20,46:50)]
### Team Salaries ############################################################
data("Salaries")
Salaries <- data.table(Salaries)
str(Salaries)
head(Salaries)
Salaries$salary <- as.numeric(Salaries$salary)
Salaries[,TeamSalary:=sum(salary), by = c("yearID","teamID")]
Salaries <- unique(Salaries[,c("yearID","teamID","TeamSalary")])
Salaries[,TeamSalary:=TeamSalary/mean(TeamSalary), by = c("yearID")]
Salaries
# merge Salaries with Teams data
Teams_w_salary <- merge(Teams, Salaries,  by = c("yearID","teamID"), all.x = TRUE)
# filter to only years with team salary data
Teams_w_salary <- Teams_w_salary[yearID>1984 & yearID>2017 & yearID!=1993,]
Teams_w_salary
# merge Salaries with Teams data
Teams_w_salary <- merge(Teams, Salaries,  by = c("yearID","teamID"), all.x = TRUE)
# filter to only years with team salary data
Teams_w_salary <- Teams_w_salary[yearID>1984 & yearID<2017 & yearID!=1993,]
Teams_w_salary
# filter to only years with team salary data
Teams_w_salary <- Teams_w_salary[yearID>1984 & yearID<2017 & yearID!=1993,]
### Data without salary ###
final_teams <- Teams[,c(1,6,15,17:24,28,33:36,50)]
### Data with salary ###
final_teams_salary <- Teams_w_salary[,c(1,6,15,17:24,28,33:36,50,51)]
# write out to csv
dir.create('data', showWarning=FALSE)
write.csv(final_teams, file.path('data', 'final_teams.csv'))
write.csv(final_teams_salary, file.path('data', 'final_teams_salary.csv'))
library(ggplot2)
library(ROCR)
library(randomForest)
library(caret)
library(dplyr)
final_teams_salary = read.csv('./data/final_teams_salary.csv')[,-1]
factor_cols = c('playoff_nextyear')
final_teams_salary[factor_cols] <- lapply(final_teams_salary[factor_cols] , factor)
final_teams_salary <- na.omit(final_teams_salary, cols="playoff_nextyear")
# get number of playoff teams per year
playoffs_year <- final_teams_salary %>%
group_by(yearID) %>%
count(playoff_nextyear) %>%
filter(playoff_nextyear == 'Y')
playoffs_year <- playoffs_year[,c(1,3)]
# train-test split by yearID
set.seed(12345)
years <- unique(final_teams_salary$yearID)
train_years <- sample(years, 0.5*length(years))
test_years <- setdiff(years, train_years)
train <- subset(final_teams_salary, yearID %in% train_years)
test <- subset(final_teams_salary, yearID %in% test_years)
outputs <- data.frame(model_name=character(),
accuracy=numeric(),
precision=numeric(),
recall=numeric(),
f1score=numeric())
# NOTE: this does not work yet
get_division_predictions <- function(data, model) {
data$playoff_prob = predict(logit.model, data, type="response")
playoff_teams <- data %>%
group_by(yearID,lgID,divID) %>%
slice_max(playoff_prob, n = 1, with_ties = FALSE)
playoff_teams$playoff_pred = 'Y'
pred <- merge(test, playoff_teams, all.x=TRUE)
pred$playoff_pred[is.na(pred$playoff_pred)] <- 'N'
return(pred$playoff_pred)
}
get_top_predictions <- function(data, model) {
total_pred = vector()
for (year in unique(data$yearID)) {
year_data = filter(data,  yearID==year)
year_data$playoff_prob = predict(logit.model, year_data, type="response")
playoffs_n <- filter(playoffs_year, yearID==year)$n
playoff_teams <- year_data %>%
slice_max(playoff_prob, n = playoffs_n, with_ties = FALSE)
playoff_teams$playoff_pred = 'Y'
pred <- merge(year_data, playoff_teams, all.x=TRUE)
pred$playoff_pred[is.na(pred$playoff_pred)] <- 'N'
total_pred = append(total_pred, pred$playoff_pred)
}
return(total_pred)
}
record_outputs <- function(model_name, pred, model) {
ConMatrix = table(test$playoff_nextyear, pred)
# calculate metrics
accuracy = (ConMatrix[1, 1] + ConMatrix[2, 2]) /  sum(ConMatrix)
precision = ConMatrix[2, 2] / (ConMatrix[2, 2] + ConMatrix[1, 2])
recall = ConMatrix[2, 2] / (ConMatrix[2, 2] + ConMatrix[2, 1])
f1score = 2*(precision*recall / (precision+recall))
return(list(model_name, accuracy, precision, recall, f1score))
}
tc <- trainControl(method = "repeatedCV", number=2, repeats=1)
logit.model <- train(playoff_nextyear~., data=train, method="LogitBoost", trControl=tc)
logit_pred <- get_top_predictions(test, logit.model)
# load libraries
library(Lahman)
library(data.table)
library(dplyr)
# load in Teams data
data("Teams")
Teams <- data.table(Teams)
# explore Teams data
str(Teams)
head(Teams)
# filter Teams to only include 1960 - 2019
Teams <- Teams[yearID>1968,]
summary(Teams)
head(Teams)
### Playoffs Variable ########################################################
# Teams that made the playoffs
#2012 - Present (not inlcuding 2020) 10 teams made the playoffs
Teams[yearID==2019,]
Teams[yearID==2019 & (DivWin=="Y" | WCWin == "Y"),]
Teams[yearID==2012 & (DivWin=="Y" | WCWin == "Y"),1:40]
# 1994 -2011 8 teams made the playoffs 1994 there was NO POST SEASON
Teams[yearID==2011,1:40]
Teams[yearID==2011 & (DivWin=="Y" | WCWin=="Y"),1:40]
Teams[yearID==1995,1:40]
Teams[yearID==1995 & (DivWin=="Y" | WCWin=="Y"),1:40]
Teams[yearID==1994,]
Teams[yearID==1994 & (DivWin=="Y" | WCWin=="Y"),1:40]
# 1969 -1993 4 teams made the playoffs
Teams[yearID==1993,]
Teams[yearID==1993 & DivWin=="Y",]
Teams[yearID==1969,1:40]
Teams[yearID==1969 & DivWin=="Y",1:40]
# Creating playoffs variable
Teams$Playoffs <- "N"
Teams[yearID>1993 & (DivWin=="Y" | WCWin=="Y"), Playoffs:= "Y"]
Teams[yearID<1994 & DivWin=="Y", Playoffs:="Y"]
# creating playoffs Lag variable
setkey(Teams, teamID, yearID) # important for ordering
Teams[,playoff_nextyear:=(shift(Playoffs, -1)),by=teamID]
Teams[teamID=='ATL',c(1:20,46:50)]
### Team Salaries ############################################################
data("Salaries")
Salaries <- data.table(Salaries)
str(Salaries)
head(Salaries)
Salaries$salary <- as.numeric(Salaries$salary)
Salaries[,TeamSalary:=sum(salary), by = c("yearID","teamID")]
Salaries <- unique(Salaries[,c("yearID","teamID","TeamSalary")])
Salaries[,TeamSalary:=TeamSalary/mean(TeamSalary), by = c("yearID")]
Salaries
# add 2017 - 2019 salaries
Sal_17_19 <- read.csv('../data/input/salaries2017-19.csv')
setnames(Sal_17_19, "salary","TeamSalary")
Salaries
Salaries[teamID=='MIA',]
Salaries[teamID=='LAN',]
Teams[teamID=='MIA',]
Teams[franchID=='FLA',]
Sal_17_19
Sal_17_19[teamID=='MIA',]
Sal_17_19 <- data.table(Sal_17_19)
Sal_17_19[teamID=='MIA',]
Salaries[teamID=='MIA',]
Salaries[teamID=='LAN',]
Sal_17_19[teamID=='MIA',]
Teams[teamID=='LAN',]
# add 2017 - 2019 salaries
Sal_17_19 <- read.csv('../data/input/salaries2017-19.csv')
# add 2017 - 2019 salaries
Sal_17_19 <- read.csv('../data/input/salaries2017-19.csv')
setnames(Sal_17_19, "salary","TeamSalary")
Sal_17_19 <- data.table(Sal_17_19)
Sal_17_19[teamID=='MIA',]
Sal_17_19[teamID=='LAN',]
# merge Salaries with Teams data
Teams_w_salary <- merge(Teams, Salaries,  by = c("yearID","teamID"), all.x = TRUE)
# filter to only years with team salary data
Teams_w_salary <- Teams_w_salary[yearID>1984 & yearID!=1993,]
Teams_w_salary <- data.table(Teams_w_salary)
Teams_w_salary
### Data without salary ###
final_teams <- Teams[,c(1,6,15,17:24,28,33:36,50)]
### Data with salary ###
final_teams_salary <- Teams_w_salary[,c(1,6,15,17:24,28,33:36,50,51)]
# write out to csv
dir.create('data', showWarning=FALSE)
write.csv(final_teams, file.path('data', 'final_teams.csv'))
write.csv(final_teams_salary, file.path('data', 'final_teams_salary.csv'))
library(ggplot2)
library(ROCR)
library(randomForest)
library(caret)
library(dplyr)
final_teams_salary = read.csv('./data/final_teams_salary.csv')[,-1]
factor_cols = c('playoff_nextyear')
final_teams_salary[factor_cols] <- lapply(final_teams_salary[factor_cols] , factor)
final_teams_salary <- na.omit(final_teams_salary, cols="playoff_nextyear")
# get number of playoff teams per year
playoffs_year <- final_teams_salary %>%
group_by(yearID) %>%
count(playoff_nextyear) %>%
filter(playoff_nextyear == 'Y')
playoffs_year <- playoffs_year[,c(1,3)]
playoffs_year
View(playoffs_year)
final_teams_salary
View(final_teams_salary)
# merge Salaries with Teams data
Teams_w_salary <- merge(Teams, Salaries,  by = c("yearID","teamID"), all.x = TRUE)
# filter to only years with team salary data
Teams_w_salary <- Teams_w_salary[yearID>1984 & yearID!=1993,]
Teams_w_salary
### Data without salary ###
final_teams <- Teams[,c(1,6,15,17:24,28,33:36,50)]
### Data with salary ###
final_teams_salary <- Teams_w_salary[,c(1,6,15,17:24,28,33:36,50,51)]
# write out to csv
dir.create('data', showWarning=FALSE)
write.csv(final_teams, file.path('data', 'final_teams.csv'))
write.csv(final_teams_salary, file.path('data', 'final_teams_salary.csv'))
final_teams_salary
final_teams_salary1 = read.csv('./data/final_teams_salary.csv')[,-1]
final_teams_salary1
View(final_teams_salary1)
final_teams_salary = read.csv('./data/final_teams_salary.csv')[,-1]
factor_cols = c('playoff_nextyear')
final_teams_salary[factor_cols] <- lapply(final_teams_salary[factor_cols] , factor)
final_teams_salary <- na.omit(final_teams_salary, cols="playoff_nextyear")
### Playoffs Variable ########################################################
# Teams that made the playoffs
#2012 - Present (not inlcuding 2020) 10 teams made the playoffs
Teams[yearID==2019,]
# Creating playoffs variable
Teams[yearID==2018,]
Teams_w_salary[yearID==2018,]
# SYST 568 Project
# Data Cleaning. Created by Chad Scott. Last updated 12/01/2020 by Jonathan Nelson.
#options(max.print = 10000)
# Install Lahman package
#  install.packages("Lahman")
# load libraries
library(Lahman)
library(data.table)
library(dplyr)
# view all available data sets in the Lahman package
#data( package = "Lahman")
# load in Teams data
data("Teams")
Teams <- data.table(Teams)
# explore Teams data
str(Teams)
head(Teams)
# filter Teams to only include 1960 - 2019
Teams <- Teams[yearID>1968,]
summary(Teams)
head(Teams)
### Playoffs Variable ########################################################
# Teams that made the playoffs
#2012 - Present (not inlcuding 2020) 10 teams made the playoffs
Teams[yearID==2019,]
Teams[yearID==2019 & (DivWin=="Y" | WCWin == "Y"),]
Teams[yearID==2012 & (DivWin=="Y" | WCWin == "Y"),1:40]
# 1994 -2011 8 teams made the playoffs 1994 there was NO POST SEASON
Teams[yearID==2011,1:40]
Teams[yearID==2011 & (DivWin=="Y" | WCWin=="Y"),1:40]
Teams[yearID==1995,1:40]
Teams[yearID==1995 & (DivWin=="Y" | WCWin=="Y"),1:40]
Teams[yearID==1994,]
Teams[yearID==1994 & (DivWin=="Y" | WCWin=="Y"),1:40]
# 1969 -1993 4 teams made the playoffs
Teams[yearID==1993,]
Teams[yearID==1993 & DivWin=="Y",]
Teams[yearID==1969,1:40]
Teams[yearID==1969 & DivWin=="Y",1:40]
# Creating playoffs variable
Teams$Playoffs <- "N"
Teams[yearID>1993 & (DivWin=="Y" | WCWin=="Y"), Playoffs:= "Y"]
Teams[yearID<1994 & DivWin=="Y", Playoffs:="Y"]
# creating playoffs Lag variable
setkey(Teams, teamID, yearID) # important for ordering
Teams[,playoff_nextyear:=(shift(Playoffs, -1)),by=teamID]
Teams[teamID=='ATL',c(1:20,46:50)]
### Team Salaries ############################################################
data("Salaries")
Salaries <- data.table(Salaries)
str(Salaries)
head(Salaries)
Salaries$salary <- as.numeric(Salaries$salary)
Salaries[,TeamSalary:=sum(salary), by = c("yearID","teamID")]
Salaries <- unique(Salaries[,c("yearID","teamID","TeamSalary")])
Salaries[,TeamSalary:=TeamSalary/mean(TeamSalary), by = c("yearID")]
Salaries
# add 2017 - 2019 salaries
Sal_17_19 <- read.csv('../data/input/salaries2017-19.csv')
setnames(Sal_17_19, "salary","TeamSalary")
Salaries <- rbind(Salaries,Sal_17_19)
# merge Salaries with Teams data
Teams_w_salary <- merge(Teams, Salaries,  by = c("yearID","teamID"), all.x = TRUE)
# filter to only years with team salary data
Teams_w_salary <- Teams_w_salary[yearID>1984 & yearID!=1993,]
### Features for modeling ##########################################
### Data without salary ###
final_teams <- Teams[,c(1,6,15,17:24,28,33:36,50)]
### Data with salary ###
final_teams_salary <- Teams_w_salary[,c(1,6,15,17:24,28,33:36,50,51)]
# write out to csv
dir.create('data', showWarning=FALSE)
write.csv(final_teams, file.path('data', 'final_teams.csv'))
write.csv(final_teams_salary, file.path('data', 'final_teams_salary.csv'))
library(ggplot2)
library(ROCR)
library(randomForest)
library(caret)
library(dplyr)
final_teams_salary = read.csv('./data/final_teams_salary.csv')[,-1]
factor_cols = c('playoff_nextyear')
final_teams_salary[factor_cols] <- lapply(final_teams_salary[factor_cols] , factor)
final_teams_salary <- na.omit(final_teams_salary, cols="playoff_nextyear")
# get number of playoff teams per year
playoffs_year <- final_teams_salary %>%
group_by(yearID) %>%
count(playoff_nextyear) %>%
filter(playoff_nextyear == 'Y')
playoffs_year <- playoffs_year[,c(1,3)]
View(playoffs_year)
# train-test split by yearID
set.seed(12345)
years <- unique(final_teams_salary$yearID)
train_years <- sample(years, 0.5*length(years))
test_years <- setdiff(years, train_years)
train <- subset(final_teams_salary, yearID %in% train_years)
test <- subset(final_teams_salary, yearID %in% test_years)
outputs <- data.frame(model_name=character(),
accuracy=numeric(),
precision=numeric(),
recall=numeric(),
f1score=numeric())
# NOTE: this does not work yet
get_division_predictions <- function(data, model) {
data$playoff_prob = predict(logit.model, data, type="response")
playoff_teams <- data %>%
group_by(yearID,lgID,divID) %>%
slice_max(playoff_prob, n = 1, with_ties = FALSE)
playoff_teams$playoff_pred = 'Y'
pred <- merge(test, playoff_teams, all.x=TRUE)
pred$playoff_pred[is.na(pred$playoff_pred)] <- 'N'
return(pred$playoff_pred)
}
get_top_predictions <- function(data, model) {
total_pred = vector()
for (year in unique(data$yearID)) {
year_data = filter(data,  yearID==year)
year_data$playoff_prob = predict(logit.model, year_data, type="response")
playoffs_n <- filter(playoffs_year, yearID==year)$n
playoff_teams <- year_data %>%
slice_max(playoff_prob, n = playoffs_n, with_ties = FALSE)
playoff_teams$playoff_pred = 'Y'
pred <- merge(year_data, playoff_teams, all.x=TRUE)
pred$playoff_pred[is.na(pred$playoff_pred)] <- 'N'
total_pred = append(total_pred, pred$playoff_pred)
}
return(total_pred)
}
record_outputs <- function(model_name, pred, model) {
ConMatrix = table(test$playoff_nextyear, pred)
# calculate metrics
accuracy = (ConMatrix[1, 1] + ConMatrix[2, 2]) /  sum(ConMatrix)
precision = ConMatrix[2, 2] / (ConMatrix[2, 2] + ConMatrix[1, 2])
recall = ConMatrix[2, 2] / (ConMatrix[2, 2] + ConMatrix[2, 1])
f1score = 2*(precision*recall / (precision+recall))
return(list(model_name, accuracy, precision, recall, f1score))
}
tc <- trainControl(method = "repeatedCV", number=2, repeats=1)
logit.model <- train(playoff_nextyear~., data=train, method="LogitBoost", trControl=tc)
logit_pred <- get_top_predictions(test, logit.model)
